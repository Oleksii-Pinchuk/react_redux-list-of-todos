{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","features/user/userSlice.ts","features/todos/todosSlice.ts","store/index.ts","hooks/hooks.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoStatus","request","endpoint","options","a","fetch","response","json","Error","getUser","createAsyncThunk","userId","userSlice","createSlice","name","initialState","user","selectedUserId","isUserLoading","userLoadingError","reducers","changeUserId","state","action","payload","extraReducers","pending","type","fulfilled","rejected","actions","getTodos","deleteTodo","todoId","method","todosSlice","todos","isTodosLoading","todosLoadingError","rootReducer","combineReducers","todosReducer","userReducer","useAppSelector","useSelector","useAppDispatch","useDispatch","TodoList","dispatch","store","useState","title","setTitle","status","setStatus","useEffect","prepearedTodos","loweredTitle","toLowerCase","filteredTodosByInput","filter","todo","includes","Active","completed","Completed","prepeareTodos","handleFilter","event","target","value","handleSelectUser","handleRemoveTodo","className","onChange","placeholder","id","map","classNames","htmlFor","readOnly","checked","onClick","CurrentUser","email","phone","App","configureStore","reducer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4dc6ea1a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\n\nimport { useAppDispatch, useAppSelector } from '../../hooks/hooks';\nimport { changeUserId, getUser } from '../../features/user/userSlice';\nimport { deleteTodo, getTodos } from '../../features/todos/todosSlice';\n\nimport './TodoList.scss';\n\nenum TodoStatus {\n  Active = 'active',\n  Completed = 'completed',\n}\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const {\n    todos,\n    isTodosLoading,\n    todosLoadingError,\n  } = useAppSelector(store => store.todos);\n  const { user, selectedUserId } = useAppSelector(store => store.user);\n\n  const [title, setTitle] = useState('');\n  const [status, setStatus] = useState('');\n\n  useEffect(() => {\n    dispatch(getTodos());\n  }, []);\n\n  const prepeareTodos = (): Todo[] => {\n    const loweredTitle = title.toLowerCase();\n\n    const filteredTodosByInput = todos.filter(todo => (\n      todo.title.toLowerCase().includes(loweredTitle)\n    ));\n\n    switch (status) {\n      case TodoStatus.Active:\n        return filteredTodosByInput.filter(todo => !todo.completed);\n      case TodoStatus.Completed:\n        return filteredTodosByInput.filter(todo => todo.completed);\n\n      default:\n        return filteredTodosByInput;\n    }\n  };\n\n  const prepearedTodos = prepeareTodos();\n\n  const handleFilter = (event: FilterEvent) => {\n    const { name, value } = event.target;\n\n    dispatch(changeUserId(null));\n\n    switch (name) {\n      case 'title':\n        setTitle(value);\n        break;\n\n      case 'status':\n        setStatus(value);\n        break;\n\n      default:\n    }\n  };\n\n  const handleSelectUser = async (userId: number) => {\n    if (selectedUserId !== userId) {\n      await dispatch(getUser(userId));\n    }\n\n    dispatch(changeUserId(userId));\n  };\n\n  const handleRemoveTodo = async (todoId: number) => {\n    await dispatch(deleteTodo(todoId));\n    await dispatch(getTodos());\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div>\n        {(!todosLoadingError && !isTodosLoading) && (\n          <>\n            <input\n              type=\"text\"\n              onChange={handleFilter}\n              placeholder=\"filter the todos by title\"\n              name=\"title\"\n            />\n\n            <select\n              id=\"select\"\n              onChange={handleFilter}\n              value={status}\n              name=\"status\"\n            >\n              <option value=\"all\">\n                All\n              </option>\n\n              <option value=\"active\">\n                Active\n              </option>\n\n              <option value=\"completed\">\n                Completed\n              </option>\n            </select>\n\n            <div className=\"TodoList__list-container\">\n              <ul className=\"TodoList__list\">\n                {\n                  prepearedTodos.map(todo => (\n                    <li\n                      className={classNames(\n                        'TodoList__item',\n                        {\n                          'TodoList__item--unchecked': !todo.completed,\n                          'TodoList__item--checked': todo.completed,\n                        },\n                      )}\n                      key={todo.id}\n                    >\n                      <label htmlFor={`${todo.id}`}>\n                        <input\n                          id={`${todo.id}`}\n                          type=\"checkbox\"\n                          readOnly\n                          checked={todo.completed}\n                        />\n                        <p>{todo.title}</p>\n                      </label>\n                      <div className=\"TodoList__user-buttonContainer\">\n                        <button\n                          className=\"TodoList__user-button button\"\n                          type=\"button\"\n                          onClick={() => handleRemoveTodo(todo.id)}\n                        >\n                          Delete\n                        </button>\n\n                        <button\n                          className={classNames(\n                            'TodoList__user-button',\n                            'button',\n                            {\n                              'TodoList__user-button--selected':\n                              todo.userId === user?.id,\n                            },\n                          )}\n                          type=\"button\"\n                          onClick={() => handleSelectUser(todo.userId)}\n                        >\n                          {`User #${todo.userId}`}\n                        </button>\n                      </div>\n                    </li>\n                  ))\n                }\n              </ul>\n            </div>\n          </>\n        )}\n\n        {todosLoadingError && !isTodosLoading && (\n          'Unable to load the data'\n        )}\n\n        {isTodosLoading && (\n          'Loading...'\n        )}\n      </div>\n    </div>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api/';\n\nexport const request\n  // eslint-disable-next-line max-len\n  = async<T> (endpoint: string, options?: RequestInit): Promise<T> => {\n    try {\n      const response = await fetch(`${API_URL}/${endpoint}`, options);\n\n      return await response.json();\n    } catch (error) {\n      throw new Error();\n    }\n  };\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { request } from '../../api/api';\n\nconst initialState: UserState = {\n  user: null,\n  selectedUserId: 0,\n  isUserLoading: true,\n  userLoadingError: false,\n};\n\nexport const getUser = createAsyncThunk(\n  'user/getUser',\n  async (userId: number): Promise<User> => {\n    return request<User>(`users/${userId}`);\n  },\n);\n\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    changeUserId: (state: UserState, action) => {\n      state.selectedUserId = action.payload;\n    },\n  },\n\n  extraReducers: {\n    [getUser.pending.type]: (state: UserState) => {\n      state.userLoadingError = false;\n      state.isUserLoading = true;\n    },\n    [getUser.fulfilled.type]: (state: UserState, action) => {\n      state.isUserLoading = false;\n      state.userLoadingError = false;\n      state.user = action.payload;\n    },\n    [getUser.rejected.type]: (state: UserState) => {\n      state.isUserLoading = false;\n      state.userLoadingError = true;\n    },\n  },\n});\n\nexport const { changeUserId } = userSlice.actions;\n\nexport default userSlice.reducer;\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { request } from '../../api/api';\n\nconst initialState: TodosState = {\n  todos: [],\n  isTodosLoading: true,\n  todosLoadingError: false,\n};\n\nexport const getTodos = createAsyncThunk(\n  'todos/getTodos',\n  async ():Promise<Todo[]> => request('todos'),\n);\n\nexport const deleteTodo = createAsyncThunk(\n  'todos/deleteTodo',\n  async (todoId: number):Promise<Todo[]> => request(`todos/${todoId}`, {\n    method: 'DELETE',\n  }),\n);\n\nexport const todosSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n  },\n  extraReducers: {\n    [getTodos.pending.type]: (state: TodosState) => {\n      state.isTodosLoading = true;\n      state.todosLoadingError = false;\n    },\n    [getTodos.fulfilled.type]: (state: TodosState, action) => {\n      state.isTodosLoading = false;\n      state.todosLoadingError = false;\n      state.todos = action.payload;\n    },\n    [getTodos.rejected.type]: (state: TodosState) => {\n      state.isTodosLoading = false;\n      state.todosLoadingError = true;\n    },\n  },\n});\n\nexport default todosSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport userReducer from '../features/user/userSlice';\nimport todosReducer from '../features/todos/todosSlice';\n\nconst rootReducer = combineReducers({\n  todos: todosReducer,\n  user: userReducer,\n});\n\nexport const setupStore = () => {\n  return configureStore({\n    reducer: rootReducer,\n  });\n};\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport type AppStore = ReturnType<typeof setupStore>;\nexport type AppDipatch = AppStore['dispatch'];\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDipatch, RootState } from '../store';\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\nexport const useAppDispatch = () => useDispatch<AppDipatch>();\n","import React from 'react';\n\nimport './CurrentUser.scss';\nimport { useAppDispatch, useAppSelector } from '../../hooks/hooks';\nimport { changeUserId } from '../../features/user/userSlice';\n\nexport const CurrentUser: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const {\n    user,\n    isUserLoading,\n    userLoadingError,\n  } = useAppSelector(store => store.user);\n\n  const handleClearButton = () => {\n    dispatch(changeUserId(null));\n  };\n\n  return (\n    <>\n      {(!userLoadingError && !isUserLoading) && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user?.id}`}</span></h2>\n\n          <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n          <p className=\"CurrentUser__email\">{user?.email}</p>\n          <p className=\"CurrentUser__phone\">{user?.phone}</p>\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={handleClearButton}\n          >\n            Clear\n          </button>\n        </div>\n      )}\n\n      <div>\n        {(userLoadingError && !isUserLoading) && (\n          <div>\n            Unable to load the data\n          </div>\n\n        )}\n\n        {isUserLoading && (\n          <div>\n            Loading...\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n","import React from 'react';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport './App.scss';\nimport './styles/general.scss';\nimport { useAppSelector } from './hooks/hooks';\n\nconst App: React.FC = () => {\n  const { selectedUserId } = useAppSelector(store => store.user);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { setupStore } from './store';\nimport App from './App';\n\nconst store = setupStore();\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}